---
description: This rule provides clear guidance on source code structure and architectural patterns for NestJS projects. It defines how modules, controllers, services, and entities should be organized, ensuring consistency and scalability across the codebase. The goal is to help developers maintain a clean, modular, and extensible architecture that supports long-term growth and team collaboration.
alwaysApply: true
---
- **Code Organization and Structure:**
  - *Directory Structure:*
    - Adopt a **hybrid modular structure** that balances simplicity for CRUD modules and clear separation for complex business logic.
        - Place each feature under `modules/`.  
        - **CRUD-oriented modules**: contain `controller`, `service`, `repository`, `entity`, and `module`.  
        - **Domain-heavy modules**: additionally include a `domain/` folder for `policies`, `rules`, and `value objects`.  
        - **Common utilities** (`errors`, `utils`, `types`, ...) live in `common/`.  
        - **Config** (`db`, `env`, `logger`) and `app.module.ts` (bootstrap, DI, routing) live at root.
    - Example:
      
      src/
      ├── main.ts
      ├── app.controller.spec.ts
      ├── app.controller.ts
      ├── app.module.ts
      ├── app.service.ts
      ├── config/
      ├── core/
      │   ├── filters/
      │   │   └── http-exception.filter.ts
      │   ├── interceptors/
      │   │   └── logging.interceptor.ts
      │   └── ...
      ├── common/
      │   ├── errors/
      │   ├── utils/
      │   ├── types/
      │   ├── ...
      ├── auth/
      │   ├── ...
      ├── employee/                                         # CRUD module
      │   ├── employee.module.ts
      │   ├── employee.controller.ts
      │   ├── employee.service.ts
      │   ├── employee.repository.ts
      │   └── ...
      ├── payroll/                                          # Domain-heavy module
      │   ├── payroll.module.ts
      │   ├── payroll.controller.ts
      │   ├── payroll.service.ts
      │   ├── payroll.repository.ts
      │   ├── entities
      │   │   └── payroll-record.entity.ts
      │   ├── domain
      │   │   └── salary.policy.ts
      │   │   └── deduction.policy.ts
      │   │   └── bonus.policy.ts
      │   │   └── salary.value-object.ts
      │   └── ...

  - *Principles:*
    - Keep CRUD modules minimal.  
    - Use `domain/` only when business logic becomes complex.  
    - Repository abstracts persistence, returning aggregates or entities.  
    - `*.module.ts` wires providers, controllers, and repositories following NestJS conventions.  
    - Monolith deployment, modular structure → future microservice extraction is straightforward.
